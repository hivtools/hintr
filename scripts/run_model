#!/usr/bin/env Rscript
"Run a model and save outputs at specified paths
Usage:
  run_model (--model-payload=<model-payload> --calibrate-payload=<calibrate-payload> --download-payload=<download-payload> --model-output-path=<output-path> --calibrate-output-path=<calibrate-output-path> --calibrate-plot-path=<calibrate-plot-path> --spectrum-path=<spectrum-path> --coarse-output-path=<coarse-output-path> --summary-report-path=<summary-report-path> --agyw-path=<agyw-path>)

Options:
  -h --help                                       Show this screen.
  --model-payload=<model-payload>                 Path to model run payload.
  --calibrate-payload=<calibrate-payload>         Path to calibrate payload.
  --download-payload=<download-payload>           Path to spectrum download payload.
  --model-output-path=<output-path>               Path to model output data qs.
  --calibrate-output-path=<calibrate-output-path> Path to calibrate output data qs.
  --calibrate-plot-path=<calibrate-plot-path>     Path to calibrate plot data qs.
  --spectrum-path=<spectrum-path>                 Path to spectrum zip download.
  --coarse-output-path=<coarse-output-path>       Path to summary zip download.
  --summary-report-path=<summary-report-path>     Path to summary report download.
  --agyw-path=<agyw-path>                         Path to AGYW tool download.
" -> usage

dat <- docopt::docopt(usage)
names(dat) <- gsub("-", "_", names(dat), fixed = TRUE)

model_payload <- jsonlite::fromJSON(dat$model_payload)
invisible(lapply(model_payload$data, function(x) {
  if (!file.exists(x$path)) {
    stop(sprintf("Input file %s doesn't exist.", x))
  }
}))

output <- naomi::hintr_run_model(model_payload$data,
                                 model_payload$options,
                                 dat$model_output_path)

message(sprintf("Saving model output at %s",
                normalizePath(dat$model_output_path, winslash = "/",
                              mustWork = TRUE)))

calibrate_payload <- jsonlite::fromJSON(dat$calibrate_payload)
calibrated <- naomi::hintr_calibrate(output, calibrate_payload$options,
                                     dat$calibrate_plot_path,
                                     dat$calibrate_output_path)
message(sprintf("Saving calibrate output at %s",
                normalizePath(dat$calibrate_output_path,
                              winslash = "/", mustWork = TRUE)))
message(sprintf("Saving calibrate plot data at %s",
                normalizePath(dat$calibrate_plot_path,
                              winslash = "/", mustWork = TRUE)))

download_payload <- jsonlite::fromJSON(dat$download_payload,
                                        simplifyVector = FALSE)
notes <- sprintf("%s\n%s\n%s\n",
                 download_payload$notes$project_notes$name,
                 download_payload$notes$project_notes$updated,
                 download_payload$notes$project_notes$note)
spectrum <- naomi::hintr_prepare_spectrum_download(calibrated,
                                                   dat$spectrum_path,
                                                   notes)

state <- jqr::jq(readLines(dat$download_payload), ".state")
t <- tempfile()
state_path <- file.path(t, "info", "project_state.json")
dir.create(dirname(state_path), FALSE, TRUE)
writeLines(jsonlite::prettify(state), state_path)
zip::zip_append(spectrum$path, dirname(state_path), mode = "cherry-pick")
message(
  sprintf("Saving spectrum download at %s", normalizePath(dat$spectrum_path,
                                                          winslash = "/",
                                                          mustWork = TRUE)))

coarse_age <- naomi::hintr_prepare_coarse_age_group_download(
  calibrated, dat$coarse_output_path)
message(sprintf("Saving coarse output at %s",
                normalizePath(dat$coarse_output_path,
                              winslash = "/", mustWork = TRUE)))

summary_report <- naomi::hintr_prepare_summary_report_download(
  calibrated, dat$summary_report_path)
message(sprintf("Saving summary report at %s",
                normalizePath(dat$summary_report_path,
                              winslash = "/", mustWork = TRUE)))


agyw_tool <- naomi::hintr_prepare_agyw_download(calibrated,
                                                model_payload$data$pjnz,
                                                dat$agyw_path)
message(sprintf("Saving AGYW tool at %s",
                normalizePath(dat$agyw_path,
                              winslash = "/", mustWork = TRUE)))
