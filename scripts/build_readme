#!/usr/bin/env Rscript
setup <- function() {
  docker <- stevedore::docker_client()
  nw <- docker$network$create("hintr_nw")
  redis <- docker$container$run("redis", name = "redis",
                                network = nw, detach = TRUE, rm = TRUE)
  hintr <- docker$container$run("mrcide/hintr:master", name = "hintr",
                                ports = "8888:8888",
                                env = c(REDIS_URL = "redis://redis:6379",
                                        USE_MOCK_MODEL = "true"),
                                network = nw, detach = TRUE, rm = TRUE,
                                working_dir = "/src/tests/testthat")

  url <- "http://localhost:8888"
  for (i in seq_len(10)) {
    message("Attempt ", i)
    ok <- tryCatch({
      httr::stop_for_status(httr::GET(url))
      TRUE
    }, error = function(e) FALSE)
    if (ok) {
      break
    }
    Sys.sleep(1)
  }
  if (!ok) {
    stop("Failed to bring up server in time")
  }

  list(
    containers = list(
      hintr = hintr,
      redis = redis
    ),
    cleanup = function() {
      hintr$kill()
      redis$kill()
      nw$remove()
    }
  )
}

run_command <- function(x, env, containers) {
  data_cmd <- ""
  if (!is.null(x$data)) {
    data <- containers$hintr$exec(cmd = c("Rscript", "-e", x$data),
                                  working_dir = "/src", stderr = FALSE,
                                  stream = FALSE)
    if (data$exit_code != 0) {
      stop("Failed to prepare input data ", data$output)
    }
    data_cmd <- paste("--data", format_input_data(as.character(data$output)))
    cmd <- paste0("curl -s ", data_cmd,
                  glue::glue(x$command, .envir = env, .trim = FALSE))
  } else {
    cmd <- paste("curl -s", glue::glue(x$command, .envir = env, .trim = FALSE))
  }
  x$cmd <- cmd
  x$output <- system(x$cmd, intern = TRUE)
  if (is.null(x$format) || x$format == "json") {
    parsed <- jsonlite::fromJSON(x$output)
    if (!is.null(parsed$errors)) {
      stop(parsed$errors)
    }
    if (parsed$status != "success") {
      stop(paste(parsed$errors$error, parsed$errors$detail))
    }
  } else {
    parsed <- x$output
  }
  if (!is.null(x$collect)) {
    for (i in seq_along(x$collect)) {
      env[[names(x$collect)[[i]]]] <- parsed$data[[x$collect[[i]]]]
    }
  }
  if (!is.null(x$sleep)) {
    message("...waiting")
    Sys.sleep(x$sleep)
  }

  x
}

pretty_truncate <- function(x, format = "json", max = 20) {
  if (format == "json") {
    str <- strsplit(jsonlite::prettify(x), "\n", fixed = TRUE)[[1]]
  } else if (format == "bytes") {
    str <- sprintf("Hidden %d bytes of output", length(x))
  } else if (format == "header") {
    str <- paste(x, collapse = "\n")
  } else {
    stop(sprintf("Unknown format type %s", format))
  }

  if (length(str) > max) {
    str <- c(str[seq_len(max)],
             sprintf("... truncated %d lines of output", length(str) - max))
  }

  str
}

pretty_command <- function(x) {
  x <- paste("$", x)
  x <- strsplit(x, "\n")[[1]]
  x
}

format_input_data <- function(data) {
  paste0("'", glue::trim(jsonlite::prettify(data)), "' \\\n")
}

render <- function(x) {
  c(x$comment,
    "",
    "```",
    pretty_command(x$cmd),
    "```",
    "",
    "```json",
    pretty_truncate(x$output, x$format),
    "```")
}

process <- function(containers) {
  env <- new.env()
  dat <- yaml::read_yaml("README.yml")
  for (i in seq_along(dat)) {
    message(sprintf("%2d: %s", i, dat[[i]]$command))
    if (is.null(dat[[i]]$format)) {
      dat[[i]]$format <- "json"
    }
    dat[[i]] <- run_command(dat[[i]], env, containers)
  }
  res <- lapply(dat, render)

  txt <- readLines("README.md.in")
  i <- which(txt == "HINT_EXAMPLES")
  stopifnot(length(i) == 1L)

  header <- "<!-- DO NOT EDIT - EDIT README.md.in INSTEAD! -->"
  readme <- c(header, txt[seq_len(i - 1)], unlist(res), txt[-seq_len(i)])
  writeLines(readme, "README.md")
}

main <- function() {
  setup <- setup()
  on.exit(setup$cleanup())
  process(setup$containers)
}

if (!interactive()) {
  main()
}
